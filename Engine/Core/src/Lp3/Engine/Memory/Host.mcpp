~namespace Lp3::Engine::Memory;


/** A class which owns some chunk of memory. */
class Host
{
    ~block "h-predef"
    {
        #include <memory>
    }

    public ~global(::) void * operator new(size_t size,
                                           Lp3::Engine::Memory::Host * memory)
    {
        return memory->Alloc(size);
    }

    public ~global(::) void operator delete(void * ptr,
                                            Lp3::Engine::Memory::Host * memory)
    {
        memory->Free(ptr);
    }

    public Host() {}

    public virtual inline ~Host(){}

    /** Allocates some memory. */
    public virtual void * Alloc(const size_t size) = 0;

    template<typename T>
    public T * New()
    {
        return new (this) T();
    }

    template<typename T, typename... Parameters>
    public T * New(Parameters ... arguments)
    {
        return new (this) T{std::forward<Parameters>(arguments)...};
    }

    template<typename T, typename... Parameters>
    public T & NewRef(Parameters... arguments)
    {
        T * ptr = new (this) T{std::forward<Parameters>(arguments)...};
        return *ptr;
    }

    template<typename T>
    public void Delete(T * p)
    {
        if (p)
        {
            p->~T();
            this->Free(p);
        }
    }

    template<typename T>
    public void Delete(T & p)
    {
        Delete(&p);
    }


    /** Frees some memory. */
    public virtual void Free(void * ptr) = 0;

    /** The bytes available for use. */
    public virtual size_t GetBytesFree() const = 0;

    /** The size of this Host's usable memory. */
    public virtual size_t GetBytesAvailable() const = 0;

    /** The Bytes used by this Host. */
    public virtual size_t GetBytesUsed() const = 0;

    /** The size of this Host's usuable memory plus the sizeof() it's
     * type. */
    public virtual size_t GetSize() const = 0;
};
