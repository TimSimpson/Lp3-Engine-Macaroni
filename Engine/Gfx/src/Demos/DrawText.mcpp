/**
 *
 *  Draw Text
 *
 *  This executable loads a bitmap and uses it to write text to the screen.
 *
 */
~unit DrawText type=exe;

~import Lp3::Engine::Time::Clock;
~import boost::format;
~import LP3_LOG_DEBUG;
~import Lp3::Engine::Gfx::BitmapReader;
~import LP3_COROUTINE;
~import Lp3::Engine::Coroutine::CoroutineState;
~import Lp3::Engine::Gfx::GfxManager;
~import Lp3::Engine::Gfx::GradientRenderer;
~import Lp3::Engine::Gfx::Image;
~import Lp3::Engine::Gfx::ImageMemory;
~import Lp3::Engine::Resources::InputFileStream;
~import Lp3::Engine::Gfx::InternalPixel;
~import Lp3::Engine::Gfx::NonTexturedFlatQuad;
~import Lp3::Engine::Gfx::Pixel;
~import Lp3::Engine::Gfx::PixelDiff;
~import Lp3::Engine::Resources::ReadStreamPtr;
~import Lp3::Engine::Gfx::Renderer;
~import Lp3::Engine::Gfx::Screen;
~import Lp3::Engine::Gfx::ScreenObject;
~import Lp3::Engine::Gfx::ScreenObjectPtr;
~import std::string;
~import Lp3::Engine::Gfx::Texture;
~import Lp3::Engine::Gfx::TexturePtr;
~import Lp3::Engine::Gfx::TileRenderer;
~import Lp3::Engine::Gfx::TileSet;
~import Lp3::Engine::Gfx::Geometry::TexturedQuadSrc;
~import std::vector;
~import Lp3::Engine::Gfx::VertexPixel;
~import std::vector;

~block "cpp" :=

#define LP3_MICROMAIN_WITH_GFX_DEPS true
#include <Lp3/Engine/MicroMain.h>


const auto red = VertexPixel::Create(0xFF, 0x00, 0x00, 0xFF);
const auto green = VertexPixel::Create(0x00, 0xFF, 0x00, 0xFF);
const auto blue = VertexPixel::Create(0x00, 0x00, 0xFF, 0xFF);
//const auto textBg = VertexPixel::Create(0x22, 0x22, 0x55, 0x11);
//const auto textBgEnd = VertexPixel::Create(0x00, 0x00, 0x00, 0x11);
const auto textBg = VertexPixel::Create(64, 64, 255, 0xFF);
const auto textBgEnd = VertexPixel::Create(0x00, 0x00, 0x00, 0x88);
const auto orange = VertexPixel::Create(255, 132, 0, 0xFF);


using namespace Lp3::Engine::Gfx::Geometry;


struct Snail
{
    CoroutineState state;
    ScreenPoint p;
    float speed;

    Snail(ScreenPoint p, const float speed)
    :   p(p),
        speed(speed)
    {}

    Snail()
    :   p({-16, 24}), speed(1)
    {}

    void Draw(TileRenderer & tr)
    {
        const float z = 0.11f + ((p.Y / 480.0f) * 0.10f);
        tr.Write({p.X, p.Y}, z, {12, 6});
    }

    void update()
    {
        LP3_COROUTINE_BEGIN(state);
            while(true)
            {
                while(p.X < 640)
                {
                    p.X += speed * Clock::GetSpeedMod();
                    LP3_YIELD();
                }
                p = { -16, p.Y };
            }
        LP3_COROUTINE_END();
    }
};


class GraphicsObject : public ScreenObject
{
    float fakeClock;
    vector<Snail> snails;
    TexturePtr textureText;
    std::unique_ptr<TileSet> tileSet;

    public: GraphicsObject(ImageMemory & memory)
    :   fakeClock(0.0f)
    {
        LP3_LOG_DEBUG("Creating textureTexts...");
        ReadStreamPtr input(new InputFileStream("Engine/text.bmp"));
        const Pixel colorKey(0, 0, 0, 0);
        textureText = memory.LoadTexture(input, colorKey);
        tileSet.reset(new TileSet(textureText, {16, 16}, {16, 16}));

        for(int i = 0; i < 2500; i ++)
        {
            snails.push_back(Snail(
                {Clock::GetRandom(640), Clock::GetRandom(480)},
                Clock::GetRandom(30 * 16)));
        }
    }

    public: virtual void DrawOpaque(Renderer & renderer)
    {
        renderer.UseNoTexture();
        GradientRenderer gr(renderer);
        gr.VerticalQuad({0, 0}, {639, 479},
                        0.1f,
                        VertexPixel::Create(255, 0, 255, 255),
                        VertexPixel::Create(0, 255, 0, 255));
        //renderer.Quad({{0, 0}, {639, 479}}, 0.1f, green);

        gr.VerticalQuad({16, 320 + 24},
                        {16 + (16 * 34), 320 + 24 + (5 * 16)},
                        0.2f, textBg, textBgEnd);

        renderer.Triangle({ 320, 200}, {480, 430}, {39, 467}, 0.15f, orange);
    }

    public: virtual void DrawTranslucent(Renderer & renderer)
    {
        TileRenderer tr = tileSet->StartRenderer(renderer);
        tr.Write({320-8, 240-8}, 0.5f, {1, 6});
       /* {
            const auto bottom = 320+16 + (3 * 16) + 16;
            for(int x = 0; x < 32; ++x)
            {
                tr.Write({32 + (x * 16), 320+16}, 0.5f, {7, 6});
                tr.Write({32 + (x * 16), bottom}, 0.5f, {7, 6});
            }
            for(int y = 0; y < 3; ++y)
            {
                tr.Write({16, 320+32 + (16 * y)}, 0.5f, {2, 6});
                tr.Write({32 + (32 * 16), 320+32 + (16 * y)}, 0.5f, {2, 6});
            }
            tr.Write({16, 320 + 16}, 0.5f, {3, 6});
            tr.Write({16 + (32 * 16), 320+16 + (3 * 16) + 16}, 0.5f, {6, 6});
            tr.Write({16, 320+16 + (3 * 16) + 16}, 0.5f, {4, 6});
            tr.Write({16 + (32 * 16), 320+16 + (3 * 16) + 16}, 0.5f, {5, 6});
        }*/

        tr.Write({32, 320 + 32}, 0.5f,
            "And ye, I say,\n"
            "don't doubt me,\n"
            "for I shall rise in the night\n"
            "to drag away your dreams.");

        // Draw the snail.
        for(Snail & snail : snails)
        {
            snail.update();
            snail.Draw(tr);
        }

        //const int fps = 1.0 / Clock::GetSpeedMod();
        std::string fpsString = str(boost::format("    FPS:%d") % Clock::GetFps());
        tr.Write({32, 32}, 0.5f, fpsString.c_str());

        std::string avgFps = str(boost::format("Avg FPS:%d") % Clock::GetAverageFps());
        tr.Write({32, 32 + 16}, 0.5f, avgFps.c_str());

        fakeClock += Clock::GetSpeedMod() * 1.0f;
        std::string otherString = str(boost::format("TIME: %f") % fakeClock);
        tr.Write({32, 32 + 32}, 0.5f, otherString.c_str());
    }
};


class Main
{
private:
    GfxManager manager;

public:
    Main(const vector<string> & arguments
         LP3_MICROMAIN_WINDOWS_ARGS(, HINSTANCE hInstance, HWND hWnd))
    :   manager(LP3_MICROMAIN_WINDOWS_ARGS(hWnd))
    {
        LP3_LOG_DEBUG("Initializing GFX...");

        Screen & screen = manager.GetScreen(0);
        ImageMemory & memory = screen.GetImageMemory();

        ScreenObjectPtr obj(new GraphicsObject(memory));
        screen.SetObject(obj);

        //Clock::Init(10 * 1000.0f); // Never resort to slow down, keep fps honest
        Clock::Init(1000.0f/60.0f); // Snails always move as fps=60

        LP3_LOG_DEBUG("Finished initialization.");
    }

    ~Main(
    )
    {
        LP3_LOG_DEBUG("Shutting down, good-bye.");
    }


    void Iterate()
    {
        Clock::NextFrame();
        manager.Render();
    }

    #ifdef LP3_COMPILE_TARGET_WINDOWS
        void WindowsMessage(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam)
        {
            switch(message){
                case WM_SIZE:
                    /* Tell Gfx the size of our window. This
                     * does not affect the game's resolution. */
                    manager.Resize({ LOWORD(lParam), HIWORD(lParam) });
                    break;
                default:
                    break;
            }
        }
    #endif
};

LP3_MICROMAIN(Main, "Lp3::Engine::Gfx::DrawText");
