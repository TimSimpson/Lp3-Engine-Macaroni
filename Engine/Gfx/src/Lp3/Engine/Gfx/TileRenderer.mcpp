~import Lp3::Engine::Gfx::Geometry::Coordinates2d;
~import Lp3::Engine::Gfx::Renderer;
~import Lp3::Engine::Gfx::InternalPixel;
~import boost::intrusive_ptr;
~import Lp3::Engine::Gfx::Geometry::NormalizedCoordinates2d;
~import Lp3::Engine::Gfx::Geometry::SpriteCoordinates;
~import Lp3::Engine::Gfx::Geometry::Size2d;
~import Lp3::Engine::Gfx::Texture;
~import Lp3::Engine::Gfx::TexturePtr;
~import Lp3::Engine::Gfx::Geometry::TexturedQuadSrc;
~import Lp3::Engine::Gfx::Geometry::TexturedQuadUV;
~import Lp3::UInt8;


~namespace Lp3::Engine::Gfx;




~import Lp3::Engine::Gfx::TileSet;


class TileRenderer
{
    Renderer & renderer;
    const TileSet & tileSet;

    friend TileSet;

    private TileRenderer(Renderer & renderer, const TileSet & tileSet)
    :   renderer(renderer),
        tileSet(tileSet)
    {}

    public void Write(const Coordinates2d<float> & screenPosition,
                      const float z,
                      const Coordinates2d<Lp3::UInt8> & tileSource)
    {
        const SpriteCoordinates c = {
            screenPosition,
            { (float) screenPosition.X + tileSet.singleTileSize.Width - 1,
              (float) screenPosition.Y + tileSet.singleTileSize.Height - 1 }
        };
/*
        const NormalizedCoordinates2d<float> start = {
            tileSource.X * tileSet.normalizedSingleTileSize.Width,
            tileSource.Y * tileSet.normalizedSingleTileSize.Height
        };
        const TexturedQuadUV uv = {
            start,
            {
                start.X + tileSet.normalizedSingleTileSizeNI.Width,
                start.Y + tileSet.normalizedSingleTileSizeNI.Height
            }
        };
        LP3_ASSERT_TRUE(uv.A.X <= 1.0 && uv.A.X >= 0.0);
        LP3_ASSERT_TRUE(uv.A.Y <= 1.0 && uv.A.Y >= 0.0);
        LP3_ASSERT_TRUE(uv.B.X <= 1.0 && uv.B.X >= 0.0);
        LP3_ASSERT_TRUE(uv.B.Y <= 1.0 && uv.B.Y >= 0.0);
        renderer.TexturedQuad(c, z, uv);
*/
        const Coordinates2d<int> start = {
            tileSource.X * tileSet.singleTileSize.Width,
            tileSource.Y * tileSet.singleTileSize.Height
        };
        const TexturedQuadSrc src = {
            start,
            {
                start.X + tileSet.singleTileSize.Width - 1,
                start.Y + tileSet.singleTileSize.Height - 1,
            }
        };
        renderer.TexturedQuad(c, z, src);
    }

    public void Write(const Coordinates2d<float> screenPosition,
                      const float z, const char * text)
    {
        Coordinates2d<float> pos = screenPosition;
        for(; '\0' != *text; ++ text)
        {
            if ('\n' == *text)
            {
                pos.Y += tileSet.singleTileSize.Height;
                pos.X = screenPosition.X;
                continue;
            }
            LP3_ASSERT_TRUE(*text > 31 && *text < 128);
            const int offSet = *text - 32;
            const Lp3::UInt8 row = offSet / tileSet.textureSizeInTiles.Width;
            const Lp3::UInt8 col = offSet -
                                   (row * tileSet.textureSizeInTiles.Width);
            Write(pos, z, { col, row });
            pos.X += tileSet.singleTileSize.Width;
        }
    }
};
