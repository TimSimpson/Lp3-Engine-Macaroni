

~import Lp3::Engine::Gfx::Renderer;
~import boost::shared_ptr;


~namespace Lp3::Engine::Gfx;


class Screen {};

class ScreenObject
{
	protected int references;

public:
	ScreenObject()
	:	references(0)
	{
	}

	virtual ~ScreenObject()
	{
	}

	virtual void DrawOpaque(Renderer & renderer) = 0;

	virtual void DrawTranslucent(Renderer & renderer) = 0;
};

typedef boost::shared_ptr<ScreenObject> ScreenObjectPtr;


class Screen
{
	~import Lp3::Engine::Gfx::ImageMemory;

private:
	ScreenObjectPtr sharedPtr; // Really wish I'd never done this.

public:
	virtual ~Screen()
	{
	}

	virtual ImageMemory & GetImageMemory() = 0;

	void SetObject(ScreenObject * object)
	{
		sharedPtr.reset();
		setObject(object);
	}

	// Support the old interface from my "shared pointers should be used
	// everywhere" days.
	void SetObject(ScreenObjectPtr object)
	{
		sharedPtr = object;
		setObject(object.get());
	}

protected:
	virtual void setObject(ScreenObject * object) = 0;
};
