~unit "Lp3/Engine/Gfx/Dreamcast/DreamcastGfxManager" ;

~import boost::optional;
~import Lp3::Engine::Gfx::GfxManager;
~import Lp3::Engine::Gfx::Dreamcast::DreamcastScreen;
~import Lp3::Engine::Gfx::Geometry::Size2d;

~namespace Lp3::Engine::Gfx::Dreamcast;

~block "top"
{
    #include <Lp3/LE.h>
    #ifdef LP3_COMPILE_TARGET_DREAMCAST
}
~block "bottom"
{
    #endif // LP3_COMPILE_TARGET_DREAMCAST
}

~block "cpp"
{
    namespace {

        static bool initialized = false;

        void init()
        {
            if (!initialized)
            {
                pvr_init_params_t params = {
                    // Enable opaque and translucent polygons with size 16
                    { PVR_BINSIZE_16, PVR_BINSIZE_0, PVR_BINSIZE_16, PVR_BINSIZE_0, PVR_BINSIZE_16 },
                    //{ PVR_BINSIZE_16, PVR_BINSIZE_0, PVR_BINSIZE_0, PVR_BINSIZE_0, PVR_BINSIZE_0 },
                    // Vertex buffer size 512K
                    512*1024
                    };
                pvr_init(&params);
                initialized = true;
            }
        }
    } // end anonymous namespace
}

class DreamcastGfxManager {

    private DreamcastScreen screen;

    // Nothing works except for 640 x 480, so this argument is ignored.
    public DreamcastGfxManager(boost::optional<
                    Lp3::Engine::Gfx::Geometry::Size2d<unsigned int>
                >   virtualResolution = boost::none)
    {}

    public ~DreamcastGfxManager() {
    }

    public Screen & GetScreen(const unsigned int index)
    {
        return screen;
    }

    public virtual unsigned int GetScreenCount()
    {
        return 1;
    }

    public virtual void Render()
    {
        screen.render();
    }

    private void setUpPvrLikeMapping()
    {
    }
};
