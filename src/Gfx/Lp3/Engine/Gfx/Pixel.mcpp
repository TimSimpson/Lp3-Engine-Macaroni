
~namespace Lp3::Engine::Gfx;

class Pixel
{
public:
    Lp3::UInt8 Red;
    Lp3::UInt8 Green;
    Lp3::UInt8 Blue;
    Lp3::UInt8 Alpha;

    Pixel()
    :   Red(0),
        Green(0),
        Blue(0),
        Alpha(0)
    {
    }

    Pixel(const Lp3::UInt8 red,  const Lp3::UInt8 green,
          const Lp3::UInt8 blue, const Lp3::UInt8 alpha)
    :   Red(red),
        Green(green),
        Blue(blue),
        Alpha(alpha)
    {
    }

    public bool operator == (const Pixel & rhs) const
    {
        return this->Red   == rhs.Red
            && this->Green == rhs.Green
            && this->Blue  == rhs.Blue
            && this->Alpha == rhs.Alpha;
    }

    template<typename Archive>
    void serialize(Archive & archive)
    {
        archive(cereal::make_nvp("Red", Red));
        archive(cereal::make_nvp("Green", Green));
        archive(cereal::make_nvp("Blue", Blue));
        archive(cereal::make_nvp("Alpha", Alpha));
    }
};

