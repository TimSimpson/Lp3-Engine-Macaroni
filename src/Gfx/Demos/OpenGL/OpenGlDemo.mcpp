~unit OpenGlDemo type=exe; // platform=windows;

~import boost::format;
~import LP3_LOG_DEBUG;
~import Lp3::Engine::Gfx::InternalPixel;
~import std::string;
~import std::vector;


~block "top" {
#include <Lp3/LE.h>
#if defined(LP3_COMPILE_TARGET_DREAMCAST)
	int main()
	{
		return 0;
	}
#else
}
~block "bottom" {
#endif
}

~block "cpp" :=

#ifndef LP3_COMPILE_TARGET_WINDOWS
	#include <GL/glut.h>
#else
	#include <windows.h>
	#include <GL/gl.h>
	#include <gl/glu.h>
#endif



#include <Lp3/Engine/MicroMain.h>


const unsigned int window_width  = 640;
const unsigned int window_height = 480;

struct Sprite
{
	int X, Y, Width, Height;
};


const InternalPixel red   = { 255, 0, 0, 0 };
const InternalPixel green = { 0, 255, 0, 0 };
const InternalPixel blue  = { 0, 0, 255, 0 };

void render(const Sprite & sprite, const InternalPixel & pixel)
{
	const auto X2 = sprite.X + sprite.Width;
	const auto Y2 = sprite.Y + sprite.Height;
	//glColor3ub(X2, 		  sprite.Y, 000); glVertex2f(-1,  1);
	//glColor3ub(sprite.X, Y2, 		000); glVertex2f( 1,  1);
	//glColor3ub(sprite.X, sprite.Y, 255); glVertex2f( 1, -1);
	//glColor3ub(X2, 		  Y2, 		000); glVertex2f(-1, -1);
	glColor3ub(pixel.red, pixel.green, pixel.blue);
	//glColor3ub(255.0, 0.0, 0.0);
	glVertex2f(sprite.X, Y2);
	glVertex2f(X2, Y2);
	glVertex2f(X2, sprite.Y);
	glVertex2f(sprite.X, sprite.Y);
}


void iteration()
{
	// Z angle
	static float angle;
	// Clear color (screen)
	// And depth (used internally to block obstructed objects)
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
	// Load identity matrix
	//glLoadIdentity();
	// Multiply in translation matrix
	//glTranslatef(0,0, -10);
	// Multiply in rotation matrix
	//glRotatef(angle, 0, 0, 1);
	// Render colored quad
	glBegin(GL_QUADS);
	//glColor3ub(255, 000, 000); glVertex2f(-1,  1);
	//glColor3ub(000, 255, 000); glVertex2f( 1,  1);
	//glColor3ub(000, 000, 255); glVertex2f( 1, -1);
	//glColor3ub(255, 255, 000); glVertex2f(-1, -1);

	InternalPixel pixels[3];
	pixels[0] = red;
	pixels[1] = green;
	pixels[2] = blue;
	int pixelIndex = 0;
	int start = ( (int) angle ) % 10 - 0;
	for (int i = start; i < 640; i += 10) {
		for (int j = start; j < 480; j += 10) {
			Sprite s = {i, j, 8, 8};
			render(s, pixels[pixelIndex]);
			pixelIndex += 1;
			if (pixelIndex > 2) {
				pixelIndex = 0;
			}
		}
	}

	glEnd();

	// Increase angle to rotate
	angle+=0.25;
}

// Make OpenGL behave similarly to the PVR.
void SetUpPvrLikeMapping()
{
	//http://stackoverflow.com/questions/6151135/in-opengl-can-i-draw-a-pixel-that-exactly-at-the-coordinates-5-5

	glViewport(0, 0, 640, 480);
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	glOrtho(0, 640, 0, 480, -1, 1);
	glMatrixMode(GL_MODELVIEW);
	glLoadIdentity();




//	glViewport( 0, 0, width, height );

//	glMatrixMode( GL_PROJECTION );
	glEnable( GL_DEPTH_TEST );
//	gluPerspective( 45, (float)width/height, .1, 100 );
//	glMatrixMode( GL_MODELVIEW );
}

#ifndef LP3_COMPILE_TARGET_WINDOWS

void main_loop_function()
{
	iteration();
	glutSwapBuffers();
}

// Initialize GLUT and start main loop
int Lp3MicroMain_Init(const std::vector<std::string> & arguments) {
	int argc = 1;
	char * args[] = { "OpenGlDemo" };
	glutInit(&argc, args);
	glutInitWindowSize(window_width, window_height);
	glutInitDisplayMode(GLUT_RGB | GLUT_DOUBLE);
	glutCreateWindow("GLUT Example!!!");
	glutIdleFunc(main_loop_function);
	SetUpPvrLikeMapping();
	glutMainLoop();
	return 0;
}

void Lp3MicroMain_Iterate()
{
}

int Lp3MicroMain_ShutDown()
{
}

#else

HDC deviceContext;
HGLRC openGlRenderContext;

float theta = 0.0f;

class Main
{
	HWND hWnd;

public:
	Main(const std::vector<std::string> & arguments,
		 HINSTANCE hInstance, HWND hWnd)
	: 	hWnd(hWnd)
	{
		LP3_LOG_DEBUG("Hello from the OpenGlDemo demo!");

		deviceContext = GetDC( hWnd );

		PIXELFORMATDESCRIPTOR pixelDescription;
		int format;
		// set the pixel pixelDescription for the DC
		ZeroMemory( &pixelDescription, sizeof( pixelDescription ) );
		pixelDescription.nSize = sizeof( pixelDescription );
		pixelDescription.nVersion = 1;
		pixelDescription.dwFlags = PFD_DRAW_TO_WINDOW | PFD_SUPPORT_OPENGL | PFD_DOUBLEBUFFER;
		pixelDescription.iPixelType = PFD_TYPE_RGBA;
		pixelDescription.cColorBits = 24;
		pixelDescription.cDepthBits = 16;
		pixelDescription.iLayerType = PFD_MAIN_PLANE;
		format = ChoosePixelFormat(deviceContext, &pixelDescription);
		SetPixelFormat(deviceContext, format, &pixelDescription);

		// create and enable the render context (RC)
		openGlRenderContext = wglCreateContext(deviceContext);
		wglMakeCurrent(deviceContext, openGlRenderContext);

		SetUpPvrLikeMapping();
	}

	~Main()
	{
		wglMakeCurrent(NULL, NULL);
		wglDeleteContext(openGlRenderContext);
		ReleaseDC(hWnd, deviceContext);
	}

	void Iterate()
	{
		iteration();
		SwapBuffers(deviceContext);
	}

	void WindowsMessage(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam)
	{
	}
};

#endif

LP3_MICROMAIN(Main, "OpenGlDemo")
