~import std::exception;
~import boost::optional;
~import std::string;
~import-h type_traits;


~namespace Lp3;


class Exception : public virtual exception
{
	private string message;

	~block "h" {
	public:
		template<typename Message>
		explicit Exception(
			Message && message,
			typename std::enable_if<
				!std::is_same<Exception, Message>::value>::type * = nullptr
		) BOOST_NOEXCEPT
		: 	exception(),
			message(std::forward<Message>(message))
		{
		}
	}

	public Exception(const Exception & other) BOOST_NOEXCEPT
	:	message(other.message)
	{

	}

	public Exception & operator =(const Exception & other)
	{
		this->message = other.message;
		return *this;
	}

	public virtual const char * what() const BOOST_NOEXCEPT
	{
		return message.c_str();
	}

};
