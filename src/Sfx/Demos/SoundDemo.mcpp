~unit "SoundDemo" type=exe ;

~import Lp3::Engine::Sfx::Channel;
~import Lp3::Engine::Sfx::Sources::ChannelSourceTone;
~import Lp3::Engine::Sfx::Sources::ChannelSourceTone2;
~import Lp3::Engine::Sfx::Sources::Chirpy;
~import Lp3::Engine::Sfx::Sources::Sinusoidal;
~import Lp3::Engine::Memory::GlobalHeap;
~import Lp3::Engine::Memory::GlobalHeapPtr;
~import Lp3::Engine::Resources::MemoryStream;
~import Lp3::Engine::Resources::ReadStreamPtr;
~import Lp3::Engine::Resources::ResettableReadStreamPtr;
~import Lp3::Engine::Sfx::ChannelSource;
~import Lp3::Engine::Sfx::SfxManager;
~import Lp3::Engine::Input::ToolControls;
~import Lp3::Engine::Sfx::WaveFile;
~import Lp3::Engine::Sfx::WaveFormatEx;
~import Lp3::Engine::Sfx::WaveFileSource;

~block "cpp" :=

#include <Lp3/LE.h>
#include <array>
#include <boost/format.hpp>
#include <Lp3/Exception.h>
#include <Lp3/Log.h>
#include <Lp3/Engine/Gfx/Pixel.h>
#include <boost/shared_ptr.hpp>
#include <Lp3/Assert.h>
#include <Lp3/Engine/Resources/ReadStream.h>
#include <Lp3/Engine/Resources/ReadStreamPtr.h>
#include <Lp3/Engine/Gfx/GfxManager.hpp>
#include <Lp3/Engine/Gfx/Renderer.hpp>
#include <Lp3/Engine/Gfx/Geometry.hpp>
#include <Lp3/Engine/Gfx/ImageMemory.hpp>
#include <Lp3/Engine/Resources/ResettableReadStream.h>
#include <Lp3/Engine/Resources/InputFileStream.hpp>
#include <Lp3/Engine/Gfx/ScreenObject.h>
#include <Lp3/Engine/Gfx/ScreenObjectPtr.h>
#include <Lp3/Engine/Gfx/Screen.h>
#include <string>
#include <Lp3/Engine/Gfx/Texture.hpp>
#include <Lp3/Engine/Gfx/TexturePtr.hpp>
#include <Lp3/Engine/Gfx/TileSet.h>
#include <Lp3/Engine/Gfx/TileRenderer.h>
#include <vector>
#include <memory>

using std::array;
using boost::format;
using Lp3::Engine::Gfx::GfxManager;
using Lp3::Engine::Gfx::ImageMemory;
using Lp3::Engine::Resources::InputFileStream;
using Lp3::Engine::Gfx::Pixel;
using Lp3::Engine::Resources::ReadStreamPtr;
using Lp3::Engine::Gfx::Renderer;
using Lp3::Engine::Gfx::Screen;
using Lp3::Engine::Gfx::ScreenObject;
using Lp3::Engine::Gfx::ScreenObjectPtr;
using std::string;
using Lp3::Engine::Gfx::Texture;
using Lp3::Engine::Gfx::TexturePtr;
using Lp3::Engine::Gfx::TileRenderer;
using Lp3::Engine::Gfx::TileSet;
using std::vector;
using std::unique_ptr;

#define LP3_MICROMAIN_WITH_GFX_DEPS true
#include <Lp3/Engine/MicroMain.h>
#include <Xaudio2.h>

GfxManager * manager;


using namespace Lp3::Engine::Gfx::Geometry;


#define CHECK_GOOD(expr, errMsg) { \
	const HRESULT hr = (expr); \
    if (FAILED(hr)) { \
		LP3_LOG_ERROR(errMsg); \
		throw Lp3::Exception(errMsg); \
	} \
   }


class SoundManager
{
private:

    GlobalHeapPtr globalHeap;
    SfxManager manager;
    Chirpy chirpy;
    Sinusoidal aNote;
    float cps;
    Sinusoidal cSharpNote;
    Sinusoidal eNote;
    unique_ptr<WaveFile> wf;
    unique_ptr<WaveFileSource> ws;

public:
    SoundManager()
    :   manager(),
        chirpy(),
        aNote(440, 0.5),
        cps(440),
        cSharpNote(550, 0.5),
        eNote(660, 0.5)
    {
        Channel * c = manager.CreateChannel();
        Channel * c2 = manager.CreateChannel();
        Channel * c3 = manager.CreateChannel();
        Channel * cW = manager.CreateChannel();

        ResettableReadStreamPtr file
            = InputFileStream::Create("Engine/Sfx/count.wav");
        wf = std::make_unique<WaveFile>(file);

        globalHeap = GlobalHeap::GetGlobalHeap();
        ws = std::make_unique<WaveFileSource>(
            *globalHeap,
            wf.get(),
            4 * 80 * 1024, // Four times the typical sound buffer.
            (80 * 1024) / 4);

        cW->SetSource(*ws);
        cW->Stop();

        c->SetSource(cSharpNote);
        c->Play();

        c2->SetSource(aNote);
        c2->Play();

        c3->SetSource(eNote);
        c3->Play();
    }

    ~SoundManager()
    {
    }

    void OnKeyPress(ToolControls & tc)
    {
        if (tc.GetKeyDown('W'))
        {
            ++ cps;
        }
        if (tc.GetKeyDown('S'))
        {
            -- cps;
        }
    }

    void update() {
        manager.Update();
        aNote.SetCyclesPerSecond(cps);
        /*cps --;
        if (cps < 0) {
            cps = 2600;
        }*/
    }
};


class GraphicsObject : public ScreenObject
{
    TexturePtr textureText;
    std::unique_ptr<TileSet> tileSet;

    public: GraphicsObject(ImageMemory & memory)
    {
        LP3_LOG_DEBUG("Creating textureTexts...");
        ReadStreamPtr input(new InputFileStream("Engine/text.bmp"));
        const Pixel colorKey(0, 0, 0, 0);
        textureText = memory.LoadTexture(input, colorKey);
        tileSet.reset(new TileSet(textureText, {16, 16}, {16, 16}));
    }

    public: virtual void DrawOpaque(Renderer & renderer)
    {
    }

    public: virtual void DrawTranslucent(Renderer & renderer)
    {
        TileRenderer tr = tileSet->StartRenderer(renderer);
        tr.Write({32, 304 + 32}, 0.5f,
            R"TEXT(Welcome to Music Town
            Here we are clowning around!)TEXT");
    }
};


const Size2d<unsigned int> virtualResolution{1920, 1080};

class Main
{
private:

    GfxManager manager;
    SoundManager sfx;
    ToolControls toolControls;

public:
    Main(const vector<string> & arguments
         LP3_COMPILE_TARGET_WINDOWS_THEN(, HINSTANCE hInstance, HWND hWnd))
    :   manager(LP3_COMPILE_TARGET_WINDOWS_THEN(hWnd,) virtualResolution),
        sfx(),
        toolControls(virtualResolution)
    {
        LP3_LOG_DEBUG("Initializing GFX...");
        Screen & screen = manager.GetScreen(0);
        ImageMemory & memory = screen.GetImageMemory();

        ScreenObjectPtr obj(new GraphicsObject(memory));
        screen.SetObject(obj);

                LP3_LOG_DEBUG("Finished initialization.");
    }

    ~Main()
    {
        LP3_LOG_DEBUG("Shutting down, good-bye.");
    }


    void Iterate()
    {
        manager.Render();
        sfx.update();
    }

    LP3_COMPILE_TARGET_WINDOWS_THEN(
        void WindowsMessage(HWND hWnd, UINT message, WPARAM wParam,
                            LPARAM lParam)
        {
            toolControls.WindowsMessage(hWnd, message, wParam, lParam);
            sfx.OnKeyPress(toolControls);
            switch(message){
                case WM_SIZE:
                    /* Tell Gfx the size of our window. This
                     * does not affect the game's resolution. */
                    manager.Resize({ LOWORD(lParam), HIWORD(lParam) });
                    break;
                default:
                    break;
            }
        }
    )
};

LP3_MICROMAIN(Main, "Lp3::Engine::Gfx::ResizeWindow")
