/**
 *
 *  ToolsDemo
 *
 */
~unit ToolsDemo type=exe;

~import Lp3::Engine::Resources::MediaPath;
~import Lp3::Engine::Time::Clock;
~import boost::format;
~import LP3_LOG_DEBUG;
~import Lp3::Engine::Gfx::BitmapReader;
~import LP3_COROUTINE;
~import Lp3::Engine::Coroutine::CoroutineState;
~import Lp3::Engine::Gfx::GfxManager;
~import Lp3::Engine::Gfx::GradientRenderer;
~import Lp3::Engine::Gfx::Image;
~import Lp3::Engine::Gfx::ImageMemory;
~import Lp3::Engine::Resources::InputFileStream;
~import Lp3::Engine::Gfx::InternalPixel;
~import Lp3::Engine::Gfx::NonTexturedFlatQuad;
~import Lp3::Engine::Gfx::Pixel;
~import Lp3::Engine::Gfx::PixelDiff;
~import Lp3::Engine::Resources::ReadStreamPtr;
~import Lp3::Engine::Gfx::Renderer;
~import Lp3::Engine::Gfx::Screen;
~import Lp3::Engine::Gfx::ScreenObject;
~import Lp3::Engine::Gfx::ScreenObjectPtr;
~import std::string;
~import Lp3::Engine::Gfx::Texture;
~import Lp3::Engine::Gfx::TexturePtr;
~import Lp3::Engine::Gfx::TileRenderer;
~import Lp3::Engine::Gfx::TileSet;
~import Lp3::Engine::Gfx::Geometry::TexturedQuadSrc;
~import Lp3::Engine::Input::ToolControls;
~import std::vector;
~import Lp3::Engine::Gfx::VertexPixel;
~import std::vector;
~import Lp3::Engine::Gfx::Windows_h;


~block "cpp" :=

#define LP3_MICROMAIN_WITH_GFX_DEPS true
#include <Lp3/Engine/MicroMain.h>
#include <exception>

const auto red = VertexPixel::Create(0xFF, 0x00, 0x00, 0xFF);
const auto green = VertexPixel::Create(0x00, 0xFF, 0x00, 0xFF);
const auto blue = VertexPixel::Create(0x00, 0x00, 0xFF, 0xFF);
//const auto textBg = VertexPixel::Create(0x22, 0x22, 0x55, 0x11);
//const auto textBgEnd = VertexPixel::Create(0x00, 0x00, 0x00, 0x11);
const auto textBg = VertexPixel::Create(64, 64, 255, 0xFF);
const auto textBgEnd = VertexPixel::Create(0x00, 0x00, 0x00, 0x88);
const auto orange = VertexPixel::Create(255, 132, 0, 0xFF);


GfxManager * manager;


using namespace Lp3::Engine::Gfx::Geometry;

string pressedKeys;

class Sign : public ScreenObject
{

    TexturePtr textureText;
    std::unique_ptr<TileSet> tileSet;

    public: Sign(ImageMemory & memory)
    {
        LP3_LOG_DEBUG("Creating textureTexts...");
        ReadStreamPtr input(new InputFileStream("Engine/text.bmp"));
        const Pixel colorKey(0, 0, 0, 0);
        textureText = memory.LoadTexture(input, colorKey);
        tileSet.reset(new TileSet(textureText, {16, 16}, {16, 16}));
    }

    public: virtual void DrawOpaque(Renderer & renderer)
    {
        renderer.UseNoTexture();
        GradientRenderer gr(renderer);
        gr.VerticalQuad({0, 0}, {1919, 1079},
                        0.1f,
                        VertexPixel::Create(255, 0, 255, 255),
                        VertexPixel::Create(0, 255, 0, 255));

        gr.VerticalQuad({16, 304 + 24},
                        {16 + (16 * 34), 304 + 24 + (6 * 16)},
                        0.2f, textBg, textBgEnd);

        renderer.Triangle({ 320, 200}, {480, 430}, {39, 467}, 0.15f, orange);
    }

    public: virtual void DrawTranslucent(Renderer & renderer)
    {
        TileRenderer tr = tileSet->StartRenderer(renderer);

        tr.Write({32, 304 + 32}, 0.5f,
            "Don't touch my face.");

        tr.Write({400, 700 + 32}, 0.5f,
                 pressedKeys.c_str());

        const double fps = 1.0 / Clock::GetSpeedMod();
        std::string fpsString = str(boost::format("FPS:%d") % fps);
        tr.Write({32, 32}, 0.5f, fpsString.c_str());
    }
};

const Size2d<unsigned int> virtualResolution{1920, 1080};

class Main
{
private:
    HWND hWnd;
    bool isFullScreen;
    GfxManager manager;
    ToolControls toolControls;

    LONG lStyleWin;
    LONG lExStyleWin;
    LONG lStyleFS;
    LONG lExStyleFS;

public:
    Main(const vector<string> & arguments,
         HINSTANCE hInstance, HWND hWnd)
    :   hWnd(hWnd),
        isFullScreen(false),
        manager(LP3_COMPILE_TARGET_WINDOWS_THEN(hWnd,)
                virtualResolution),
        toolControls(virtualResolution)
    {
        LP3_LOG_DEBUG("Initializing GFX...");
        Screen & screen = manager.GetScreen(0);
        ImageMemory & memory = screen.GetImageMemory();

        ScreenObjectPtr obj(new Sign(memory));
        screen.SetObject(obj);

        Clock::Init(1000.0f / 60.0f); // enforce 60 fps?

        lStyleWin = GetWindowLong(hWnd, GWL_STYLE);
        lStyleFS = lStyleWin & ~(WS_CAPTION | WS_THICKFRAME | WS_MINIMIZE
                                 | WS_MAXIMIZE | WS_SYSMENU);
        lExStyleWin = GetWindowLong(hWnd, GWL_EXSTYLE);
        lExStyleFS = lExStyleWin & ~(WS_EX_DLGMODALFRAME | WS_EX_CLIENTEDGE
                                     | WS_EX_STATICEDGE);

        LP3_LOG_DEBUG("Finished initialization.");
    }

    ~Main()
    {
        LP3_LOG_DEBUG("Shutting down, good-bye.");
    }

    void Iterate()
    {
        Clock::NextFrame();
        if (toolControls.GetKeyDownWithCancel('O'))
        {
            auto filePath = toolControls.OpenFileDialog();
            /*if (filePath)
            {
                this->open(filePath.get());
            }*/
        }

        if (toolControls.GetKeyDownWithCancel('F'))
        {
            if (isFullScreen) {
                ChangeToBorderedWindowed(hWnd);
            } else {
                ChangeToBorderlessFullScreenWindow(hWnd);
            }
            isFullScreen = !isFullScreen;
        }

        // The textbook definition of not thread safe code!
        pressedKeys = "";
        for (char c=' '; c <='~'; ++c)
        {
            if (toolControls.GetKeyDown(c))
            {
                pressedKeys += c;
            }
        }

        // Save the end of the line.
        /*if (toolControls.GetKeyDown('W'))
        {
            puppet.Position.Y -= speed;
            end.Y = 1.0;
        }
        else if (toolControls.GetKeyDown('S'))
        {
            puppet.Position.Y += speed;
            end.Y = -1.0f;
        }
        if (toolControls.GetKeyDown('A'))
        {
            puppet.Position.X -= speed;
            end.X = -1.0f;
        }
        else if (toolControls.GetKeyDown('D'))
        {
            puppet.Position.X += speed;
            end.X = 1.0f;
        }*/
        manager.Render();
    }

    void WindowsMessage(HWND hWnd, UINT message, WPARAM wParam,
                        LPARAM lParam)
    {
        this->hWnd = hWnd;
        toolControls.WindowsMessage(hWnd, message, wParam, lParam);

        switch(message){
            case WM_SIZE:
                LP3_LOG_DEBUG("Got WM_SIZE event.")
                /* Tell Gfx the size of our window. This
                 * does not affect the game's resolution. */
                manager.Resize({ LOWORD(lParam), HIWORD(lParam) });
                break;
            case WM_KEYDOWN:
                if (wParam == VK_ESCAPE)
                {
                    PostQuitMessage(0);
                }
                break;
            default:
                break;
        }
    }
};

LP3_MICROMAIN(Main, "PuppetViewer")
