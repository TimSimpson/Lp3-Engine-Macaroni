import os.path

from conans import ConanFile, CMake
from conans import tools


class Lp3EngineConan(ConanFile):
    name = "Lp3-Engine"
    version = "0.0.4.0"
    requires = ("Boost/1.60.0@lasote/stable")
    settings = "os", "compiler", "build_type", "arch"
    generators = "cmake"
    exports = ["conanfile.py", "CMakeLists.txt", "target/*", "src/*"]

    def imports(self):
       self.copy("*.dll", "", "bin")
       self.copy("*.dylib", "", "lib")

    def build(self):
        root = self.conanfile_directory
        if os.path.isfile(os.path.join(root, "project.lua")):
            cmd =  'cavatappi {root} --generate'.format(root=root)
            self.run("cd %s && %s" % (self.conanfile_directory, cmd))

        cmake = CMake(self.settings)
        self.run('cmake %s %s' % (self.conanfile_directory, cmake.command_line))
        self.run("cmake --build . %s" % cmake.build_config)

    def package(self):
        for comp in ['Core', 'Gfx', 'Input']:
            include_dir = os.path.join(self.conanfile_directory, 'src', comp)
            self.copy("*.h", dst="include", src=include_dir)
            self.copy("*.hpp", dst="include", src=include_dir)
        # Copy headers generated by Macaroni
        self.copy("*.h", dst="include", src="target")

        self.copy("*.lib", dst="lib", src="lib")
        self.copy("*.a", dst="lib", src="lib")
        self.copy("*.dll", dst="lib", src="lib")

    def package_info(self):
        self.cpp_info.libs = ["Lp3_Core", "Lp3_Gfx", "Lp3_Input"]
